
tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000dbe  00000e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800116  00800116  00000e68  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c0  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000420  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f2  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003be  00000000  00000000  00002a03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_14>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_18>
  4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_19>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__floatsisf+0x44>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z+
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <lcd_getxy+0x2>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <adc_setup>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ee eb       	ldi	r30, 0xBE	; 190
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	02 c0       	rjmp	.+4      	; 0x17e <.do_copy_data_start>

0000017a <.do_copy_data_loop>:
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0

0000017e <.do_copy_data_start>:
 17e:	a6 31       	cpi	r26, 0x16	; 22
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <.do_copy_data_loop>

00000184 <__do_clear_bss>:
 184:	11 e0       	ldi	r17, 0x01	; 1
 186:	a6 e1       	ldi	r26, 0x16	; 22
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a8 36       	cpi	r26, 0x68	; 104
 190:	b1 07       	cpc	r27, r17
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
 198:	0c 94 dd 06 	jmp	0xdba	; 0xdba <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <__vector_14>:
		
		
}
		
ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25

  		time_click++;
 1ae:	80 91 16 01 	lds	r24, 0x0116
 1b2:	90 91 17 01 	lds	r25, 0x0117
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 17 01 	sts	0x0117, r25
 1bc:	80 93 16 01 	sts	0x0116, r24

}
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <adc_setup>:

void adc_setup(){

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	87 60       	ori	r24, 0x07	; 7
 1d6:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 1d8:	ac e7       	ldi	r26, 0x7C	; 124
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	8c 91       	ld	r24, X
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);  // Enable ADC
 1e2:	80 81       	ld	r24, Z
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start first A2D Conversion
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2) | (1<<MUX1);
 1ee:	8c 91       	ld	r24, X
 1f0:	86 60       	ori	r24, 0x06	; 6
 1f2:	8c 93       	st	X, r24
	ADMUX |= (1<<ADLAR); 
 1f4:	8c 91       	ld	r24, X
 1f6:	80 62       	ori	r24, 0x20	; 32
 1f8:	8c 93       	st	X, r24
}
 1fa:	08 95       	ret

000001fc <main>:

/*WINDSPEED CALCULATIONS ARE IN ADC.C in ADCPWM FOLDER*/


int main(void)
{
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
		
		TCCR0A |= (1 << WGM01); //Timer0 to CTC mode
 202:	84 b5       	in	r24, 0x24	; 36
 204:	82 60       	ori	r24, 0x02	; 2
 206:	84 bd       	out	0x24, r24	; 36
		OCR0A = 250; //Vale Timer0 counts to
 208:	8a ef       	ldi	r24, 0xFA	; 250
 20a:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1 << OCIE0A);    //Enable COMPA interrupt
 20c:	80 91 6e 00 	lds	r24, 0x006E
 210:	82 60       	ori	r24, 0x02	; 2
 212:	80 93 6e 00 	sts	0x006E, r24
		sei();         //enable Global interrupts
 216:	78 94       	sei
		TCCR0B |= (1 << CS02) | (1<<CS00); // set 1/1024 prescale and start the timer
 218:	85 b5       	in	r24, 0x25	; 37
 21a:	85 60       	ori	r24, 0x05	; 5
 21c:	85 bd       	out	0x25, r24	; 37
		
		uint8_t x = 0;
		uint8_t line = 0;
		uint8_t time_click2=0;
		
		lcd_init(LCD_DISP_ON); //Initialize LCD
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_init>
		
		uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );  //Setup UART IO pins and defaults
 224:	87 e6       	ldi	r24, 0x67	; 103
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 b9 02 	call	0x572	; 0x572 <uart_init>
		
        lcd_clrscr(); // clear display and home cursor  
 22c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_clrscr>
        //lcd_puts("Starting"); //Write to LCD
		
		adc_setup(); //Set up ADC
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <adc_setup>
		lcd_gotoxy(0,0); 
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
		sei();	//Enable global interrupts
 23c:	78 94       	sei
 23e:	ff 24       	eor	r15, r15
		
		while (1) //Endless loop
		{
		
			if((ADCSRA & (1<<ADSC))!=1){ //ADC conversion completed
 240:	80 91 7a 00 	lds	r24, 0x007A
			x++;
 244:	f3 94       	inc	r15
			}
			
			if(x==255){x2++;x=0;}
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	f8 16       	cp	r15, r24
 24a:	51 f4       	brne	.+20     	; 0x260 <main+0x64>
 24c:	80 91 18 01 	lds	r24, 0x0118
 250:	90 91 19 01 	lds	r25, 0x0119
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 19 01 	sts	0x0119, r25
 25a:	80 93 18 01 	sts	0x0118, r24
 25e:	ff 24       	eor	r15, r15
			
			if(x2==255){
 260:	80 91 18 01 	lds	r24, 0x0118
 264:	90 91 19 01 	lds	r25, 0x0119
 268:	8f 3f       	cpi	r24, 0xFF	; 255
 26a:	91 05       	cpc	r25, r1
 26c:	49 f7       	brne	.-46     	; 0x240 <main+0x44>
			ADClow = ADCL;
 26e:	80 91 78 00 	lds	r24, 0x0078
 272:	80 93 1e 01 	sts	0x011E, r24
			adc_value = ADCH<<2 | ADClow >> 6;
 276:	20 91 79 00 	lds	r18, 0x0079
 27a:	80 91 1e 01 	lds	r24, 0x011E
 27e:	82 95       	swap	r24
 280:	86 95       	lsr	r24
 282:	86 95       	lsr	r24
 284:	83 70       	andi	r24, 0x03	; 3
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	82 2b       	or	r24, r18
 294:	93 2b       	or	r25, r19
 296:	90 93 1d 01 	sts	0x011D, r25
 29a:	80 93 1c 01 	sts	0x011C, r24
			volts = adc_value * 0.0455;	
 29e:	60 91 1c 01 	lds	r22, 0x011C
 2a2:	70 91 1d 01 	lds	r23, 0x011D
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 33 03 	call	0x666	; 0x666 <__floatunsisf>
 2ae:	25 e3       	ldi	r18, 0x35	; 53
 2b0:	3e e5       	ldi	r19, 0x5E	; 94
 2b2:	4a e3       	ldi	r20, 0x3A	; 58
 2b4:	5d e3       	ldi	r21, 0x3D	; 61
 2b6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	20 93 1f 01 	sts	0x011F, r18
 2c2:	30 93 20 01 	sts	0x0120, r19
 2c6:	40 93 21 01 	sts	0x0121, r20
 2ca:	50 93 22 01 	sts	0x0122, r21
			dtostrf(volts,3,1,buffer);
 2ce:	43 e0       	ldi	r20, 0x03	; 3
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	04 e0       	ldi	r16, 0x04	; 4
 2d4:	11 e0       	ldi	r17, 0x01	; 1
 2d6:	0e 94 4b 04 	call	0x896	; 0x896 <dtostrf>
			lcd_gotoxy(0,0);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
			if(adc_value<100){lcd_puts("0");}
 2e2:	80 91 1c 01 	lds	r24, 0x011C
 2e6:	90 91 1d 01 	lds	r25, 0x011D
 2ea:	84 36       	cpi	r24, 0x64	; 100
 2ec:	91 05       	cpc	r25, r1
 2ee:	20 f4       	brcc	.+8      	; 0x2f8 <main+0xfc>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 10 02 	call	0x420	; 0x420 <lcd_puts>
			lcd_puts(buffer);
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 10 02 	call	0x420	; 0x420 <lcd_puts>
			lcd_gotoxy(4,0);
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
			lcd_puts("V");
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 10 02 	call	0x420	; 0x420 <lcd_puts>
			x2=0;
 310:	10 92 19 01 	sts	0x0119, r1
 314:	10 92 18 01 	sts	0x0118, r1
			ADCSRA |= (1 << ADSC);
 318:	80 91 7a 00 	lds	r24, 0x007A
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	80 93 7a 00 	sts	0x007A, r24
 322:	8e cf       	rjmp	.-228    	; 0x240 <main+0x44>

00000324 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 324:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 326:	66 23       	and	r22, r22
 328:	11 f0       	breq	.+4      	; 0x32e <lcd_write+0xa>
       lcd_rs_high();
 32a:	28 9a       	sbi	0x05, 0	; 5
 32c:	01 c0       	rjmp	.+2      	; 0x330 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 32e:	28 98       	cbi	0x05, 0	; 5
    }
    lcd_rw_low();
 330:	29 98       	cbi	0x05, 1	; 5
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
	

        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 332:	87 b1       	in	r24, 0x07	; 7
 334:	8f 60       	ori	r24, 0x0F	; 15
 336:	87 b9       	out	0x07, r24	; 7
		

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 338:	98 b1       	in	r25, 0x08	; 8
 33a:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 33c:	82 2f       	mov	r24, r18
 33e:	82 95       	swap	r24
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	89 2b       	or	r24, r25
 344:	88 b9       	out	0x08, r24	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 346:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_write+0x26>
    lcd_e_low();
 34a:	2a 98       	cbi	0x05, 2	; 5
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 34c:	2f 70       	andi	r18, 0x0F	; 15
 34e:	29 2b       	or	r18, r25
 350:	28 b9       	out	0x08, r18	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 352:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_write+0x32>
    lcd_e_low();
 356:	2a 98       	cbi	0x05, 2	; 5
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 358:	9f 60       	ori	r25, 0x0F	; 15
 35a:	98 b9       	out	0x08, r25	; 8
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
	

}
 35c:	08 95       	ret

0000035e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 35e:	88 23       	and	r24, r24
 360:	11 f0       	breq	.+4      	; 0x366 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 362:	28 9a       	sbi	0x05, 0	; 5
 364:	01 c0       	rjmp	.+2      	; 0x368 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 366:	28 98       	cbi	0x05, 0	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
 368:	29 9a       	sbi	0x05, 1	; 5
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 36a:	87 b1       	in	r24, 0x07	; 7
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 370:	2a 9a       	sbi	0x05, 2	; 5
        lcd_e_delay();        
 372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 374:	96 b1       	in	r25, 0x06	; 6
        lcd_e_low();
 376:	2a 98       	cbi	0x05, 2	; 5
        
        lcd_e_delay();                       /* Enable 500ns low       */
 378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_read+0x1c>
        
        lcd_e_high();
 37a:	2a 9a       	sbi	0x05, 2	; 5
        lcd_e_delay();
 37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 37e:	86 b1       	in	r24, 0x06	; 6
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	92 95       	swap	r25
 384:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 386:	2a 98       	cbi	0x05, 2	; 5
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 388:	89 2b       	or	r24, r25
 38a:	08 95       	ret

0000038c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_read>
 392:	87 fd       	sbrc	r24, 7
 394:	fb cf       	rjmp	.-10     	; 0x38c <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 396:	88 e0       	ldi	r24, 0x08	; 8
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_read>
    
}/* lcd_waitbusy */
 3a4:	08 95       	ret

000003a6 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 3a6:	1f 93       	push	r17
 3a8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 3aa:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_waitbusy>
    lcd_write(cmd,0);
 3ae:	81 2f       	mov	r24, r17
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	0e 94 92 01 	call	0x324	; 0x324 <lcd_write>
}
 3b6:	1f 91       	pop	r17
 3b8:	08 95       	ret

000003ba <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 3ba:	1f 93       	push	r17
 3bc:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 3be:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_waitbusy>
    lcd_write(data,1);
 3c2:	81 2f       	mov	r24, r17
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	0e 94 92 01 	call	0x324	; 0x324 <lcd_write>
}
 3ca:	1f 91       	pop	r17
 3cc:	08 95       	ret

000003ce <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 3ce:	66 23       	and	r22, r22
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 3d2:	80 58       	subi	r24, 0x80	; 128
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 3d6:	80 54       	subi	r24, 0x40	; 64
 3d8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
 3dc:	08 95       	ret

000003de <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 3de:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_waitbusy>
}
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	08 95       	ret

000003e6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
}
 3ec:	08 95       	ret

000003ee <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
}
 3f4:	08 95       	ret

000003f6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 3f6:	1f 93       	push	r17
 3f8:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 3fa:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_waitbusy>
    if (c=='\n')
 3fe:	1a 30       	cpi	r17, 0x0A	; 10
 400:	49 f4       	brne	.+18     	; 0x414 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 402:	80 34       	cpi	r24, 0x40	; 64
 404:	10 f0       	brcs	.+4      	; 0x40a <lcd_putc+0x14>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	01 c0       	rjmp	.+2      	; 0x40c <lcd_putc+0x16>
 40a:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 40c:	80 58       	subi	r24, 0x80	; 128
 40e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
 412:	04 c0       	rjmp	.+8      	; 0x41c <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 414:	81 2f       	mov	r24, r17
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	0e 94 92 01 	call	0x324	; 0x324 <lcd_write>
    }

}/* lcd_putc */
 41c:	1f 91       	pop	r17
 41e:	08 95       	ret

00000420 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 428:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 42c:	89 91       	ld	r24, Y+
 42e:	88 23       	and	r24, r24
 430:	d9 f7       	brne	.-10     	; 0x428 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	ec 01       	movw	r28, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 440:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_putc>
 444:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 446:	21 96       	adiw	r28, 0x01	; 1
 448:	84 91       	lpm	r24, Z+
 44a:	88 23       	and	r24, r24
 44c:	c9 f7       	brne	.-14     	; 0x440 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 454:	1f 93       	push	r17
 456:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 458:	87 b1       	in	r24, 0x07	; 7
 45a:	8f 60       	ori	r24, 0x0F	; 15
 45c:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 45e:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 460:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 462:	22 9a       	sbi	0x04, 2	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	9a ef       	ldi	r25, 0xFA	; 250
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 46c:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 46e:	40 9a       	sbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 470:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 472:	00 c0       	rjmp	.+0      	; 0x474 <lcd_init+0x20>
    lcd_e_low();
 474:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	9e e4       	ldi	r25, 0x4E	; 78
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 47e:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 480:	00 c0       	rjmp	.+0      	; 0x482 <lcd_init+0x2e>
    lcd_e_low();
 482:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	fc 01       	movw	r30, r24
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 48e:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_init+0x3e>
    lcd_e_low();
 492:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 494:	fc 01       	movw	r30, r24
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 49a:	40 98       	cbi	0x08, 0	; 8

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 49c:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <lcd_init+0x4c>
    lcd_e_low();
 4a0:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 4a6:	88 e2       	ldi	r24, 0x28	; 40
 4a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 4b2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 4b6:	86 e0       	ldi	r24, 0x06	; 6
 4b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 4bc:	81 2f       	mov	r24, r17
 4be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_command>

}/* lcd_init */
 4c2:	1f 91       	pop	r17
 4c4:	08 95       	ret

000004c6 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 4da:	90 91 c0 00 	lds	r25, 0x00C0
    data = UART0_DATA;
 4de:	20 91 c6 00 	lds	r18, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 4e2:	e0 91 65 01 	lds	r30, 0x0165
 4e6:	ef 5f       	subi	r30, 0xFF	; 255
 4e8:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 4ea:	80 91 66 01 	lds	r24, 0x0166
 4ee:	e8 17       	cp	r30, r24
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__vector_18+0x30>
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <__vector_18+0x40>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 4f6:	89 2f       	mov	r24, r25
 4f8:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 4fa:	e0 93 65 01 	sts	0x0165, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	ed 5b       	subi	r30, 0xBD	; 189
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 506:	80 93 67 01 	sts	0x0167, r24
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 530:	90 91 63 01 	lds	r25, 0x0163
 534:	80 91 64 01 	lds	r24, 0x0164
 538:	98 17       	cp	r25, r24
 53a:	69 f0       	breq	.+26     	; 0x556 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 53c:	e0 91 64 01 	lds	r30, 0x0164
 540:	ef 5f       	subi	r30, 0xFF	; 255
 542:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 544:	e0 93 64 01 	sts	0x0164, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	ed 5d       	subi	r30, 0xDD	; 221
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	80 81       	ld	r24, Z
 550:	80 93 c6 00 	sts	0x00C6, r24
 554:	05 c0       	rjmp	.+10     	; 0x560 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 556:	80 91 c1 00 	lds	r24, 0x00C1
 55a:	8f 7d       	andi	r24, 0xDF	; 223
 55c:	80 93 c1 00 	sts	0x00C1, r24
    }
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 572:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 574:	10 92 63 01 	sts	0x0163, r1
    UART_TxTail = 0;
 578:	10 92 64 01 	sts	0x0164, r1
    UART_RxHead = 0;
 57c:	10 92 65 01 	sts	0x0165, r1
    UART_RxTail = 0;
 580:	10 92 66 01 	sts	0x0166, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 584:	97 ff       	sbrs	r25, 7
 586:	04 c0       	rjmp	.+8      	; 0x590 <uart_init+0x1e>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	80 93 c0 00 	sts	0x00C0, r24
   		baudrate &= ~0x8000;
 58e:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 590:	30 93 c5 00 	sts	0x00C5, r19
    UBRR0L = (unsigned char) baudrate;
 594:	20 93 c4 00 	sts	0x00C4, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 598:	88 e9       	ldi	r24, 0x98	; 152
 59a:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 59e:	86 e0       	ldi	r24, 0x06	; 6
 5a0:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 5a4:	08 95       	ret

000005a6 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 5a6:	90 91 65 01 	lds	r25, 0x0165
 5aa:	80 91 66 01 	lds	r24, 0x0166
 5ae:	98 17       	cp	r25, r24
 5b0:	19 f4       	brne	.+6      	; 0x5b8 <uart_getc+0x12>
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	31 e0       	ldi	r19, 0x01	; 1
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 5b8:	e0 91 66 01 	lds	r30, 0x0166
 5bc:	ef 5f       	subi	r30, 0xFF	; 255
 5be:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 5c0:	e0 93 66 01 	sts	0x0166, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ed 5b       	subi	r30, 0xBD	; 189
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 5cc:	20 91 67 01 	lds	r18, 0x0167
 5d0:	92 2f       	mov	r25, r18
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	ac 01       	movw	r20, r24
 5d6:	43 0f       	add	r20, r19
 5d8:	51 1d       	adc	r21, r1
 5da:	9a 01       	movw	r18, r20

}/* uart_getc */
 5dc:	c9 01       	movw	r24, r18
 5de:	08 95       	ret

000005e0 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 5e0:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5e2:	90 91 63 01 	lds	r25, 0x0163
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 5ea:	80 91 64 01 	lds	r24, 0x0164
 5ee:	98 17       	cp	r25, r24
 5f0:	e1 f3       	breq	.-8      	; 0x5ea <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 5f2:	e9 2f       	mov	r30, r25
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	ed 5d       	subi	r30, 0xDD	; 221
 5f8:	fe 4f       	sbci	r31, 0xFE	; 254
 5fa:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 5fc:	90 93 63 01 	sts	0x0163, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 600:	80 91 c1 00 	lds	r24, 0x00C1
 604:	80 62       	ori	r24, 0x20	; 32
 606:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
 60a:	08 95       	ret

0000060c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ec 01       	movw	r28, r24
 612:	03 c0       	rjmp	.+6      	; 0x61a <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
 614:	21 96       	adiw	r28, 0x01	; 1
 616:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 61a:	88 81       	ld	r24, Y
 61c:	88 23       	and	r24, r24
 61e:	d1 f7       	brne	.-12     	; 0x614 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	ec 01       	movw	r28, r24
 62c:	02 c0       	rjmp	.+4      	; 0x632 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
 62e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_putc>
 632:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 634:	21 96       	adiw	r28, 0x01	; 1
 636:	84 91       	lpm	r24, Z+
 638:	88 23       	and	r24, r24
 63a:	c9 f7       	brne	.-14     	; 0x62e <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 642:	80 91 65 01 	lds	r24, 0x0165
 646:	20 91 66 01 	lds	r18, 0x0166
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	4f 96       	adiw	r24, 0x1f	; 31
 64e:	82 1b       	sub	r24, r18
 650:	91 09       	sbc	r25, r1
 652:	6f e1       	ldi	r22, 0x1F	; 31
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	0e 94 24 04 	call	0x848	; 0x848 <__divmodhi4>
}/* uart_available */
 65a:	08 95       	ret

0000065c <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 65c:	80 91 66 01 	lds	r24, 0x0166
 660:	80 93 65 01 	sts	0x0165, r24
}/* uart_flush */
 664:	08 95       	ret

00000666 <__floatunsisf>:
 666:	e8 94       	clt
 668:	09 c0       	rjmp	.+18     	; 0x67c <__floatsisf+0x12>

0000066a <__floatsisf>:
 66a:	97 fb       	bst	r25, 7
 66c:	3e f4       	brtc	.+14     	; 0x67c <__floatsisf+0x12>
 66e:	90 95       	com	r25
 670:	80 95       	com	r24
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	99 23       	and	r25, r25
 67e:	a9 f0       	breq	.+42     	; 0x6aa <__floatsisf+0x40>
 680:	f9 2f       	mov	r31, r25
 682:	96 e9       	ldi	r25, 0x96	; 150
 684:	bb 27       	eor	r27, r27
 686:	93 95       	inc	r25
 688:	f6 95       	lsr	r31
 68a:	87 95       	ror	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b7 95       	ror	r27
 692:	f1 11       	cpse	r31, r1
 694:	f8 cf       	rjmp	.-16     	; 0x686 <__floatsisf+0x1c>
 696:	fa f4       	brpl	.+62     	; 0x6d6 <__floatsisf+0x6c>
 698:	bb 0f       	add	r27, r27
 69a:	11 f4       	brne	.+4      	; 0x6a0 <__floatsisf+0x36>
 69c:	60 ff       	sbrs	r22, 0
 69e:	1b c0       	rjmp	.+54     	; 0x6d6 <__floatsisf+0x6c>
 6a0:	6f 5f       	subi	r22, 0xFF	; 255
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	8f 4f       	sbci	r24, 0xFF	; 255
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <__floatsisf+0x6c>
 6aa:	88 23       	and	r24, r24
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__floatsisf+0x48>
 6ae:	96 e9       	ldi	r25, 0x96	; 150
 6b0:	11 c0       	rjmp	.+34     	; 0x6d4 <__floatsisf+0x6a>
 6b2:	77 23       	and	r23, r23
 6b4:	21 f0       	breq	.+8      	; 0x6be <__floatsisf+0x54>
 6b6:	9e e8       	ldi	r25, 0x8E	; 142
 6b8:	87 2f       	mov	r24, r23
 6ba:	76 2f       	mov	r23, r22
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__floatsisf+0x5e>
 6be:	66 23       	and	r22, r22
 6c0:	71 f0       	breq	.+28     	; 0x6de <__floatsisf+0x74>
 6c2:	96 e8       	ldi	r25, 0x86	; 134
 6c4:	86 2f       	mov	r24, r22
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	2a f0       	brmi	.+10     	; 0x6d6 <__floatsisf+0x6c>
 6cc:	9a 95       	dec	r25
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	da f7       	brpl	.-10     	; 0x6cc <__floatsisf+0x62>
 6d6:	88 0f       	add	r24, r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <__mulsf3>:
 6e0:	0b d0       	rcall	.+22     	; 0x6f8 <__mulsf3x>
 6e2:	78 c0       	rjmp	.+240    	; 0x7d4 <__fp_round>
 6e4:	69 d0       	rcall	.+210    	; 0x7b8 <__fp_pscA>
 6e6:	28 f0       	brcs	.+10     	; 0x6f2 <__mulsf3+0x12>
 6e8:	6e d0       	rcall	.+220    	; 0x7c6 <__fp_pscB>
 6ea:	18 f0       	brcs	.+6      	; 0x6f2 <__mulsf3+0x12>
 6ec:	95 23       	and	r25, r21
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <__mulsf3+0x12>
 6f0:	5a c0       	rjmp	.+180    	; 0x7a6 <__fp_inf>
 6f2:	5f c0       	rjmp	.+190    	; 0x7b2 <__fp_nan>
 6f4:	11 24       	eor	r1, r1
 6f6:	a2 c0       	rjmp	.+324    	; 0x83c <__fp_szero>

000006f8 <__mulsf3x>:
 6f8:	7e d0       	rcall	.+252    	; 0x7f6 <__fp_split3>
 6fa:	a0 f3       	brcs	.-24     	; 0x6e4 <__mulsf3+0x4>

000006fc <__mulsf3_pse>:
 6fc:	95 9f       	mul	r25, r21
 6fe:	d1 f3       	breq	.-12     	; 0x6f4 <__mulsf3+0x14>
 700:	95 0f       	add	r25, r21
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	55 1f       	adc	r21, r21
 706:	62 9f       	mul	r22, r18
 708:	f0 01       	movw	r30, r0
 70a:	72 9f       	mul	r23, r18
 70c:	bb 27       	eor	r27, r27
 70e:	f0 0d       	add	r31, r0
 710:	b1 1d       	adc	r27, r1
 712:	63 9f       	mul	r22, r19
 714:	aa 27       	eor	r26, r26
 716:	f0 0d       	add	r31, r0
 718:	b1 1d       	adc	r27, r1
 71a:	aa 1f       	adc	r26, r26
 71c:	64 9f       	mul	r22, r20
 71e:	66 27       	eor	r22, r22
 720:	b0 0d       	add	r27, r0
 722:	a1 1d       	adc	r26, r1
 724:	66 1f       	adc	r22, r22
 726:	82 9f       	mul	r24, r18
 728:	22 27       	eor	r18, r18
 72a:	b0 0d       	add	r27, r0
 72c:	a1 1d       	adc	r26, r1
 72e:	62 1f       	adc	r22, r18
 730:	73 9f       	mul	r23, r19
 732:	b0 0d       	add	r27, r0
 734:	a1 1d       	adc	r26, r1
 736:	62 1f       	adc	r22, r18
 738:	83 9f       	mul	r24, r19
 73a:	a0 0d       	add	r26, r0
 73c:	61 1d       	adc	r22, r1
 73e:	22 1f       	adc	r18, r18
 740:	74 9f       	mul	r23, r20
 742:	33 27       	eor	r19, r19
 744:	a0 0d       	add	r26, r0
 746:	61 1d       	adc	r22, r1
 748:	23 1f       	adc	r18, r19
 74a:	84 9f       	mul	r24, r20
 74c:	60 0d       	add	r22, r0
 74e:	21 1d       	adc	r18, r1
 750:	82 2f       	mov	r24, r18
 752:	76 2f       	mov	r23, r22
 754:	6a 2f       	mov	r22, r26
 756:	11 24       	eor	r1, r1
 758:	9f 57       	subi	r25, 0x7F	; 127
 75a:	50 40       	sbci	r21, 0x00	; 0
 75c:	8a f0       	brmi	.+34     	; 0x780 <__mulsf3_pse+0x84>
 75e:	e1 f0       	breq	.+56     	; 0x798 <__mulsf3_pse+0x9c>
 760:	88 23       	and	r24, r24
 762:	4a f0       	brmi	.+18     	; 0x776 <__mulsf3_pse+0x7a>
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	bb 1f       	adc	r27, r27
 76a:	66 1f       	adc	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	91 50       	subi	r25, 0x01	; 1
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	a9 f7       	brne	.-22     	; 0x760 <__mulsf3_pse+0x64>
 776:	9e 3f       	cpi	r25, 0xFE	; 254
 778:	51 05       	cpc	r21, r1
 77a:	70 f0       	brcs	.+28     	; 0x798 <__mulsf3_pse+0x9c>
 77c:	14 c0       	rjmp	.+40     	; 0x7a6 <__fp_inf>
 77e:	5e c0       	rjmp	.+188    	; 0x83c <__fp_szero>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	ec f3       	brlt	.-6      	; 0x77e <__mulsf3_pse+0x82>
 784:	98 3e       	cpi	r25, 0xE8	; 232
 786:	dc f3       	brlt	.-10     	; 0x77e <__mulsf3_pse+0x82>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	f7 95       	ror	r31
 792:	e7 95       	ror	r30
 794:	9f 5f       	subi	r25, 0xFF	; 255
 796:	c1 f7       	brne	.-16     	; 0x788 <__mulsf3_pse+0x8c>
 798:	fe 2b       	or	r31, r30
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__fp_inf>:
 7a6:	97 f9       	bld	r25, 7
 7a8:	9f 67       	ori	r25, 0x7F	; 127
 7aa:	80 e8       	ldi	r24, 0x80	; 128
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <__fp_nan>:
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	08 95       	ret

000007b8 <__fp_pscA>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	09 06       	cpc	r0, r25
 7c4:	08 95       	ret

000007c6 <__fp_pscB>:
 7c6:	00 24       	eor	r0, r0
 7c8:	0a 94       	dec	r0
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	14 06       	cpc	r1, r20
 7d0:	05 06       	cpc	r0, r21
 7d2:	08 95       	ret

000007d4 <__fp_round>:
 7d4:	09 2e       	mov	r0, r25
 7d6:	03 94       	inc	r0
 7d8:	00 0c       	add	r0, r0
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0xc>
 7dc:	88 23       	and	r24, r24
 7de:	52 f0       	brmi	.+20     	; 0x7f4 <__fp_round+0x20>
 7e0:	bb 0f       	add	r27, r27
 7e2:	40 f4       	brcc	.+16     	; 0x7f4 <__fp_round+0x20>
 7e4:	bf 2b       	or	r27, r31
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0x18>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__fp_round+0x20>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__fp_split3>:
 7f6:	57 fd       	sbrc	r21, 7
 7f8:	90 58       	subi	r25, 0x80	; 128
 7fa:	44 0f       	add	r20, r20
 7fc:	55 1f       	adc	r21, r21
 7fe:	59 f0       	breq	.+22     	; 0x816 <__fp_splitA+0x10>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	71 f0       	breq	.+28     	; 0x820 <__fp_splitA+0x1a>
 804:	47 95       	ror	r20

00000806 <__fp_splitA>:
 806:	88 0f       	add	r24, r24
 808:	97 fb       	bst	r25, 7
 80a:	99 1f       	adc	r25, r25
 80c:	61 f0       	breq	.+24     	; 0x826 <__fp_splitA+0x20>
 80e:	9f 3f       	cpi	r25, 0xFF	; 255
 810:	79 f0       	breq	.+30     	; 0x830 <__fp_splitA+0x2a>
 812:	87 95       	ror	r24
 814:	08 95       	ret
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	55 1f       	adc	r21, r21
 81e:	f2 cf       	rjmp	.-28     	; 0x804 <__fp_split3+0xe>
 820:	46 95       	lsr	r20
 822:	f1 df       	rcall	.-30     	; 0x806 <__fp_splitA>
 824:	08 c0       	rjmp	.+16     	; 0x836 <__fp_splitA+0x30>
 826:	16 16       	cp	r1, r22
 828:	17 06       	cpc	r1, r23
 82a:	18 06       	cpc	r1, r24
 82c:	99 1f       	adc	r25, r25
 82e:	f1 cf       	rjmp	.-30     	; 0x812 <__fp_splitA+0xc>
 830:	86 95       	lsr	r24
 832:	71 05       	cpc	r23, r1
 834:	61 05       	cpc	r22, r1
 836:	08 94       	sec
 838:	08 95       	ret

0000083a <__fp_zero>:
 83a:	e8 94       	clt

0000083c <__fp_szero>:
 83c:	bb 27       	eor	r27, r27
 83e:	66 27       	eor	r22, r22
 840:	77 27       	eor	r23, r23
 842:	cb 01       	movw	r24, r22
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__divmodhi4>:
 848:	97 fb       	bst	r25, 7
 84a:	09 2e       	mov	r0, r25
 84c:	07 26       	eor	r0, r23
 84e:	0a d0       	rcall	.+20     	; 0x864 <__divmodhi4_neg1>
 850:	77 fd       	sbrc	r23, 7
 852:	04 d0       	rcall	.+8      	; 0x85c <__divmodhi4_neg2>
 854:	0c d0       	rcall	.+24     	; 0x86e <__udivmodhi4>
 856:	06 d0       	rcall	.+12     	; 0x864 <__divmodhi4_neg1>
 858:	00 20       	and	r0, r0
 85a:	1a f4       	brpl	.+6      	; 0x862 <__divmodhi4_exit>

0000085c <__divmodhi4_neg2>:
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255

00000862 <__divmodhi4_exit>:
 862:	08 95       	ret

00000864 <__divmodhi4_neg1>:
 864:	f6 f7       	brtc	.-4      	; 0x862 <__divmodhi4_exit>
 866:	90 95       	com	r25
 868:	81 95       	neg	r24
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <__udivmodhi4>:
 86e:	aa 1b       	sub	r26, r26
 870:	bb 1b       	sub	r27, r27
 872:	51 e1       	ldi	r21, 0x11	; 17
 874:	07 c0       	rjmp	.+14     	; 0x884 <__udivmodhi4_ep>

00000876 <__udivmodhi4_loop>:
 876:	aa 1f       	adc	r26, r26
 878:	bb 1f       	adc	r27, r27
 87a:	a6 17       	cp	r26, r22
 87c:	b7 07       	cpc	r27, r23
 87e:	10 f0       	brcs	.+4      	; 0x884 <__udivmodhi4_ep>
 880:	a6 1b       	sub	r26, r22
 882:	b7 0b       	sbc	r27, r23

00000884 <__udivmodhi4_ep>:
 884:	88 1f       	adc	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	5a 95       	dec	r21
 88a:	a9 f7       	brne	.-22     	; 0x876 <__udivmodhi4_loop>
 88c:	80 95       	com	r24
 88e:	90 95       	com	r25
 890:	bc 01       	movw	r22, r24
 892:	cd 01       	movw	r24, r26
 894:	08 95       	ret

00000896 <dtostrf>:
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	f2 2f       	mov	r31, r18
 8a0:	f0 2e       	mov	r15, r16
 8a2:	47 fd       	sbrc	r20, 7
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <dtostrf+0x14>
 8a6:	e4 e0       	ldi	r30, 0x04	; 4
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <dtostrf+0x16>
 8aa:	e4 e1       	ldi	r30, 0x14	; 20
 8ac:	24 2f       	mov	r18, r20
 8ae:	33 27       	eor	r19, r19
 8b0:	27 fd       	sbrc	r18, 7
 8b2:	30 95       	com	r19
 8b4:	37 ff       	sbrs	r19, 7
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <dtostrf+0x28>
 8b8:	30 95       	com	r19
 8ba:	21 95       	neg	r18
 8bc:	3f 4f       	sbci	r19, 0xFF	; 255
 8be:	4f 2d       	mov	r20, r15
 8c0:	51 2f       	mov	r21, r17
 8c2:	0f 2f       	mov	r16, r31
 8c4:	ee 2e       	mov	r14, r30
 8c6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <dtoa_prf>
 8ca:	8f 2d       	mov	r24, r15
 8cc:	91 2f       	mov	r25, r17
 8ce:	1f 91       	pop	r17
 8d0:	0f 91       	pop	r16
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	08 95       	ret

000008d8 <dtoa_prf>:
 8d8:	a9 e0       	ldi	r26, 0x09	; 9
 8da:	b0 e0       	ldi	r27, 0x00	; 0
 8dc:	e2 e7       	ldi	r30, 0x72	; 114
 8de:	f4 e0       	ldi	r31, 0x04	; 4
 8e0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__prologue_saves__+0x8>
 8e4:	6a 01       	movw	r12, r20
 8e6:	12 2f       	mov	r17, r18
 8e8:	a0 2e       	mov	r10, r16
 8ea:	be 2c       	mov	r11, r14
 8ec:	2b e3       	ldi	r18, 0x3B	; 59
 8ee:	20 17       	cp	r18, r16
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <dtoa_prf+0x20>
 8f2:	2c e3       	ldi	r18, 0x3C	; 60
 8f4:	92 2e       	mov	r9, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <dtoa_prf+0x24>
 8f8:	90 2e       	mov	r9, r16
 8fa:	93 94       	inc	r9
 8fc:	ae 01       	movw	r20, r28
 8fe:	4f 5f       	subi	r20, 0xFF	; 255
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	27 e0       	ldi	r18, 0x07	; 7
 904:	09 2d       	mov	r16, r9
 906:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__ftoa_engine>
 90a:	bc 01       	movw	r22, r24
 90c:	89 81       	ldd	r24, Y+1	; 0x01
 90e:	e8 2e       	mov	r14, r24
 910:	ff 24       	eor	r15, r15
 912:	c7 01       	movw	r24, r14
 914:	89 70       	andi	r24, 0x09	; 9
 916:	90 70       	andi	r25, 0x00	; 0
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	11 f4       	brne	.+4      	; 0x920 <__stack+0x21>
 91c:	ad e2       	ldi	r26, 0x2D	; 45
 91e:	09 c0       	rjmp	.+18     	; 0x932 <__stack+0x33>
 920:	b1 fe       	sbrs	r11, 1
 922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
 924:	ab e2       	ldi	r26, 0x2B	; 43
 926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
 928:	b0 fc       	sbrc	r11, 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
 92c:	a0 e0       	ldi	r26, 0x00	; 0
 92e:	01 c0       	rjmp	.+2      	; 0x932 <__stack+0x33>
 930:	a0 e2       	ldi	r26, 0x20	; 32
 932:	e3 fe       	sbrs	r14, 3
 934:	3b c0       	rjmp	.+118    	; 0x9ac <__stack+0xad>
 936:	aa 23       	and	r26, r26
 938:	11 f4       	brne	.+4      	; 0x93e <__stack+0x3f>
 93a:	23 e0       	ldi	r18, 0x03	; 3
 93c:	01 c0       	rjmp	.+2      	; 0x940 <__stack+0x41>
 93e:	24 e0       	ldi	r18, 0x04	; 4
 940:	21 17       	cp	r18, r17
 942:	10 f0       	brcs	.+4      	; 0x948 <__stack+0x49>
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	12 1b       	sub	r17, r18
 94a:	21 2f       	mov	r18, r17
 94c:	eb 2c       	mov	r14, r11
 94e:	b4 fe       	sbrs	r11, 4
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
 952:	32 2f       	mov	r19, r18
 954:	0a c0       	rjmp	.+20     	; 0x96a <__stack+0x6b>
 956:	f6 01       	movw	r30, r12
 958:	32 2f       	mov	r19, r18
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x63>
 95e:	81 93       	st	Z+, r24
 960:	31 50       	subi	r19, 0x01	; 1
 962:	33 23       	and	r19, r19
 964:	e1 f7       	brne	.-8      	; 0x95e <__stack+0x5f>
 966:	c2 0e       	add	r12, r18
 968:	d1 1c       	adc	r13, r1
 96a:	aa 23       	and	r26, r26
 96c:	19 f0       	breq	.+6      	; 0x974 <__stack+0x75>
 96e:	f6 01       	movw	r30, r12
 970:	a1 93       	st	Z+, r26
 972:	6f 01       	movw	r12, r30
 974:	f6 01       	movw	r30, r12
 976:	31 96       	adiw	r30, 0x01	; 1
 978:	e2 fe       	sbrs	r14, 2
 97a:	05 c0       	rjmp	.+10     	; 0x986 <__stack+0x87>
 97c:	9e e4       	ldi	r25, 0x4E	; 78
 97e:	d6 01       	movw	r26, r12
 980:	9c 93       	st	X, r25
 982:	81 e4       	ldi	r24, 0x41	; 65
 984:	04 c0       	rjmp	.+8      	; 0x98e <__stack+0x8f>
 986:	9e e6       	ldi	r25, 0x6E	; 110
 988:	d6 01       	movw	r26, r12
 98a:	9c 93       	st	X, r25
 98c:	81 e6       	ldi	r24, 0x61	; 97
 98e:	11 96       	adiw	r26, 0x01	; 1
 990:	8c 93       	st	X, r24
 992:	91 83       	std	Z+1, r25	; 0x01
 994:	32 96       	adiw	r30, 0x02	; 2
 996:	df 01       	movw	r26, r30
 998:	83 2f       	mov	r24, r19
 99a:	90 e2       	ldi	r25, 0x20	; 32
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
 99e:	9d 93       	st	X+, r25
 9a0:	81 50       	subi	r24, 0x01	; 1
 9a2:	88 23       	and	r24, r24
 9a4:	e1 f7       	brne	.-8      	; 0x99e <__stack+0x9f>
 9a6:	e3 0f       	add	r30, r19
 9a8:	f1 1d       	adc	r31, r1
 9aa:	40 c0       	rjmp	.+128    	; 0xa2c <__stack+0x12d>
 9ac:	e2 fe       	sbrs	r14, 2
 9ae:	42 c0       	rjmp	.+132    	; 0xa34 <__stack+0x135>
 9b0:	aa 23       	and	r26, r26
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	23 e0       	ldi	r18, 0x03	; 3
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <__stack+0xbb>
 9b8:	24 e0       	ldi	r18, 0x04	; 4
 9ba:	21 17       	cp	r18, r17
 9bc:	10 f0       	brcs	.+4      	; 0x9c2 <__stack+0xc3>
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
 9c2:	12 1b       	sub	r17, r18
 9c4:	21 2f       	mov	r18, r17
 9c6:	eb 2c       	mov	r14, r11
 9c8:	b4 fe       	sbrs	r11, 4
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0xd1>
 9cc:	92 2f       	mov	r25, r18
 9ce:	0a c0       	rjmp	.+20     	; 0x9e4 <__stack+0xe5>
 9d0:	f6 01       	movw	r30, r12
 9d2:	92 2f       	mov	r25, r18
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	81 93       	st	Z+, r24
 9da:	91 50       	subi	r25, 0x01	; 1
 9dc:	99 23       	and	r25, r25
 9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0xd9>
 9e0:	c2 0e       	add	r12, r18
 9e2:	d1 1c       	adc	r13, r1
 9e4:	aa 23       	and	r26, r26
 9e6:	19 f0       	breq	.+6      	; 0x9ee <__stack+0xef>
 9e8:	f6 01       	movw	r30, r12
 9ea:	a1 93       	st	Z+, r26
 9ec:	6f 01       	movw	r12, r30
 9ee:	f6 01       	movw	r30, r12
 9f0:	31 96       	adiw	r30, 0x01	; 1
 9f2:	e2 fe       	sbrs	r14, 2
 9f4:	08 c0       	rjmp	.+16     	; 0xa06 <__stack+0x107>
 9f6:	89 e4       	ldi	r24, 0x49	; 73
 9f8:	d6 01       	movw	r26, r12
 9fa:	8c 93       	st	X, r24
 9fc:	8e e4       	ldi	r24, 0x4E	; 78
 9fe:	11 96       	adiw	r26, 0x01	; 1
 a00:	8c 93       	st	X, r24
 a02:	86 e4       	ldi	r24, 0x46	; 70
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <__stack+0x115>
 a06:	89 e6       	ldi	r24, 0x69	; 105
 a08:	d6 01       	movw	r26, r12
 a0a:	8c 93       	st	X, r24
 a0c:	8e e6       	ldi	r24, 0x6E	; 110
 a0e:	11 96       	adiw	r26, 0x01	; 1
 a10:	8c 93       	st	X, r24
 a12:	86 e6       	ldi	r24, 0x66	; 102
 a14:	81 83       	std	Z+1, r24	; 0x01
 a16:	32 96       	adiw	r30, 0x02	; 2
 a18:	df 01       	movw	r26, r30
 a1a:	89 2f       	mov	r24, r25
 a1c:	20 e2       	ldi	r18, 0x20	; 32
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__stack+0x125>
 a20:	2d 93       	st	X+, r18
 a22:	81 50       	subi	r24, 0x01	; 1
 a24:	88 23       	and	r24, r24
 a26:	e1 f7       	brne	.-8      	; 0xa20 <__stack+0x121>
 a28:	e9 0f       	add	r30, r25
 a2a:	f1 1d       	adc	r31, r1
 a2c:	10 82       	st	Z, r1
 a2e:	2e ef       	ldi	r18, 0xFE	; 254
 a30:	3f ef       	ldi	r19, 0xFF	; 255
 a32:	af c0       	rjmp	.+350    	; 0xb92 <__stack+0x293>
 a34:	16 16       	cp	r1, r22
 a36:	17 06       	cpc	r1, r23
 a38:	1c f0       	brlt	.+6      	; 0xa40 <__stack+0x141>
 a3a:	41 e0       	ldi	r20, 0x01	; 1
 a3c:	50 e0       	ldi	r21, 0x00	; 0
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <__stack+0x147>
 a40:	ab 01       	movw	r20, r22
 a42:	4f 5f       	subi	r20, 0xFF	; 255
 a44:	5f 4f       	sbci	r21, 0xFF	; 255
 a46:	aa 20       	and	r10, r10
 a48:	19 f4       	brne	.+6      	; 0xa50 <__stack+0x151>
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__stack+0x157>
 a50:	8a 2d       	mov	r24, r10
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	20 e0       	ldi	r18, 0x00	; 0
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	aa 23       	and	r26, r26
 a5c:	11 f0       	breq	.+4      	; 0xa62 <__stack+0x163>
 a5e:	21 e0       	ldi	r18, 0x01	; 1
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	24 0f       	add	r18, r20
 a64:	35 1f       	adc	r19, r21
 a66:	28 0f       	add	r18, r24
 a68:	39 1f       	adc	r19, r25
 a6a:	81 2f       	mov	r24, r17
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	28 17       	cp	r18, r24
 a70:	39 07       	cpc	r19, r25
 a72:	14 f0       	brlt	.+4      	; 0xa78 <__stack+0x179>
 a74:	20 e0       	ldi	r18, 0x00	; 0
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <__stack+0x17d>
 a78:	12 1b       	sub	r17, r18
 a7a:	21 2f       	mov	r18, r17
 a7c:	4b 2d       	mov	r20, r11
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	ca 01       	movw	r24, r20
 a82:	80 71       	andi	r24, 0x10	; 16
 a84:	90 70       	andi	r25, 0x00	; 0
 a86:	b4 fc       	sbrc	r11, 4
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <__stack+0x1a5>
 a8a:	b3 fc       	sbrc	r11, 3
 a8c:	0b c0       	rjmp	.+22     	; 0xaa4 <__stack+0x1a5>
 a8e:	f6 01       	movw	r30, r12
 a90:	32 2f       	mov	r19, r18
 a92:	40 e2       	ldi	r20, 0x20	; 32
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
 a96:	41 93       	st	Z+, r20
 a98:	31 50       	subi	r19, 0x01	; 1
 a9a:	33 23       	and	r19, r19
 a9c:	e1 f7       	brne	.-8      	; 0xa96 <__stack+0x197>
 a9e:	c2 0e       	add	r12, r18
 aa0:	d1 1c       	adc	r13, r1
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__stack+0x1a7>
 aa4:	32 2f       	mov	r19, r18
 aa6:	aa 23       	and	r26, r26
 aa8:	19 f0       	breq	.+6      	; 0xab0 <__stack+0x1b1>
 aaa:	f6 01       	movw	r30, r12
 aac:	a1 93       	st	Z+, r26
 aae:	6f 01       	movw	r12, r30
 ab0:	89 2b       	or	r24, r25
 ab2:	11 f0       	breq	.+4      	; 0xab8 <__stack+0x1b9>
 ab4:	13 2f       	mov	r17, r19
 ab6:	0a c0       	rjmp	.+20     	; 0xacc <__stack+0x1cd>
 ab8:	f6 01       	movw	r30, r12
 aba:	13 2f       	mov	r17, r19
 abc:	80 e3       	ldi	r24, 0x30	; 48
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <__stack+0x1c5>
 ac0:	81 93       	st	Z+, r24
 ac2:	11 50       	subi	r17, 0x01	; 1
 ac4:	11 23       	and	r17, r17
 ac6:	e1 f7       	brne	.-8      	; 0xac0 <__stack+0x1c1>
 ac8:	c3 0e       	add	r12, r19
 aca:	d1 1c       	adc	r13, r1
 acc:	09 2d       	mov	r16, r9
 ace:	06 0f       	add	r16, r22
 ad0:	ba 80       	ldd	r11, Y+2	; 0x02
 ad2:	90 e1       	ldi	r25, 0x10	; 16
 ad4:	89 2e       	mov	r8, r25
 ad6:	91 2c       	mov	r9, r1
 ad8:	8e 20       	and	r8, r14
 ada:	9f 20       	and	r9, r15
 adc:	e4 fe       	sbrs	r14, 4
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <__stack+0x1e9>
 ae0:	f1 e3       	ldi	r31, 0x31	; 49
 ae2:	bf 16       	cp	r11, r31
 ae4:	09 f4       	brne	.+2      	; 0xae8 <__stack+0x1e9>
 ae6:	01 50       	subi	r16, 0x01	; 1
 ae8:	10 16       	cp	r1, r16
 aea:	14 f0       	brlt	.+4      	; 0xaf0 <__stack+0x1f1>
 aec:	01 e0       	ldi	r16, 0x01	; 1
 aee:	03 c0       	rjmp	.+6      	; 0xaf6 <__stack+0x1f7>
 af0:	09 30       	cpi	r16, 0x09	; 9
 af2:	08 f0       	brcs	.+2      	; 0xaf6 <__stack+0x1f7>
 af4:	08 e0       	ldi	r16, 0x08	; 8
 af6:	9b 01       	movw	r18, r22
 af8:	77 ff       	sbrs	r23, 7
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <__stack+0x201>
 afc:	20 e0       	ldi	r18, 0x00	; 0
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	cb 01       	movw	r24, r22
 b02:	01 96       	adiw	r24, 0x01	; 1
 b04:	82 1b       	sub	r24, r18
 b06:	93 0b       	sbc	r25, r19
 b08:	fe 01       	movw	r30, r28
 b0a:	31 96       	adiw	r30, 0x01	; 1
 b0c:	e8 0f       	add	r30, r24
 b0e:	f9 1f       	adc	r31, r25
 b10:	8e e2       	ldi	r24, 0x2E	; 46
 b12:	f8 2e       	mov	r15, r24
 b14:	3b 01       	movw	r6, r22
 b16:	60 1a       	sub	r6, r16
 b18:	71 08       	sbc	r7, r1
 b1a:	8a 2d       	mov	r24, r10
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	44 27       	eor	r20, r20
 b20:	55 27       	eor	r21, r21
 b22:	48 1b       	sub	r20, r24
 b24:	59 0b       	sbc	r21, r25
 b26:	8f ef       	ldi	r24, 0xFF	; 255
 b28:	2f 3f       	cpi	r18, 0xFF	; 255
 b2a:	38 07       	cpc	r19, r24
 b2c:	19 f4       	brne	.+6      	; 0xb34 <__stack+0x235>
 b2e:	d6 01       	movw	r26, r12
 b30:	fd 92       	st	X+, r15
 b32:	6d 01       	movw	r12, r26
 b34:	62 17       	cp	r22, r18
 b36:	73 07       	cpc	r23, r19
 b38:	2c f0       	brlt	.+10     	; 0xb44 <__stack+0x245>
 b3a:	62 16       	cp	r6, r18
 b3c:	73 06       	cpc	r7, r19
 b3e:	14 f4       	brge	.+4      	; 0xb44 <__stack+0x245>
 b40:	80 81       	ld	r24, Z
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <__stack+0x247>
 b44:	80 e3       	ldi	r24, 0x30	; 48
 b46:	21 50       	subi	r18, 0x01	; 1
 b48:	30 40       	sbci	r19, 0x00	; 0
 b4a:	31 96       	adiw	r30, 0x01	; 1
 b4c:	24 17       	cp	r18, r20
 b4e:	35 07       	cpc	r19, r21
 b50:	24 f0       	brlt	.+8      	; 0xb5a <__stack+0x25b>
 b52:	d6 01       	movw	r26, r12
 b54:	8d 93       	st	X+, r24
 b56:	6d 01       	movw	r12, r26
 b58:	e6 cf       	rjmp	.-52     	; 0xb26 <__stack+0x227>
 b5a:	26 17       	cp	r18, r22
 b5c:	37 07       	cpc	r19, r23
 b5e:	49 f4       	brne	.+18     	; 0xb72 <__stack+0x273>
 b60:	b5 e3       	ldi	r27, 0x35	; 53
 b62:	bb 15       	cp	r27, r11
 b64:	28 f0       	brcs	.+10     	; 0xb70 <__stack+0x271>
 b66:	bb 16       	cp	r11, r27
 b68:	21 f4       	brne	.+8      	; 0xb72 <__stack+0x273>
 b6a:	81 14       	cp	r8, r1
 b6c:	91 04       	cpc	r9, r1
 b6e:	09 f4       	brne	.+2      	; 0xb72 <__stack+0x273>
 b70:	81 e3       	ldi	r24, 0x31	; 49
 b72:	f6 01       	movw	r30, r12
 b74:	81 93       	st	Z+, r24
 b76:	d6 01       	movw	r26, r12
 b78:	81 2f       	mov	r24, r17
 b7a:	90 e2       	ldi	r25, 0x20	; 32
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <__stack+0x283>
 b7e:	9c 93       	st	X, r25
 b80:	81 50       	subi	r24, 0x01	; 1
 b82:	11 96       	adiw	r26, 0x01	; 1
 b84:	88 23       	and	r24, r24
 b86:	d9 f7       	brne	.-10     	; 0xb7e <__stack+0x27f>
 b88:	e1 0f       	add	r30, r17
 b8a:	f1 1d       	adc	r31, r1
 b8c:	10 82       	st	Z, r1
 b8e:	20 e0       	ldi	r18, 0x00	; 0
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	c9 01       	movw	r24, r18
 b94:	29 96       	adiw	r28, 0x09	; 9
 b96:	ee e0       	ldi	r30, 0x0E	; 14
 b98:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__epilogue_restores__+0x8>

00000b9c <__ftoa_engine>:
 b9c:	28 30       	cpi	r18, 0x08	; 8
 b9e:	08 f0       	brcs	.+2      	; 0xba2 <__ftoa_engine+0x6>
 ba0:	27 e0       	ldi	r18, 0x07	; 7
 ba2:	33 27       	eor	r19, r19
 ba4:	da 01       	movw	r26, r20
 ba6:	99 0f       	add	r25, r25
 ba8:	31 1d       	adc	r19, r1
 baa:	87 fd       	sbrc	r24, 7
 bac:	91 60       	ori	r25, 0x01	; 1
 bae:	00 96       	adiw	r24, 0x00	; 0
 bb0:	61 05       	cpc	r22, r1
 bb2:	71 05       	cpc	r23, r1
 bb4:	39 f4       	brne	.+14     	; 0xbc4 <__ftoa_engine+0x28>
 bb6:	32 60       	ori	r19, 0x02	; 2
 bb8:	2e 5f       	subi	r18, 0xFE	; 254
 bba:	3d 93       	st	X+, r19
 bbc:	30 e3       	ldi	r19, 0x30	; 48
 bbe:	2a 95       	dec	r18
 bc0:	e1 f7       	brne	.-8      	; 0xbba <__ftoa_engine+0x1e>
 bc2:	08 95       	ret
 bc4:	9f 3f       	cpi	r25, 0xFF	; 255
 bc6:	30 f0       	brcs	.+12     	; 0xbd4 <__ftoa_engine+0x38>
 bc8:	80 38       	cpi	r24, 0x80	; 128
 bca:	71 05       	cpc	r23, r1
 bcc:	61 05       	cpc	r22, r1
 bce:	09 f0       	breq	.+2      	; 0xbd2 <__ftoa_engine+0x36>
 bd0:	3c 5f       	subi	r19, 0xFC	; 252
 bd2:	3c 5f       	subi	r19, 0xFC	; 252
 bd4:	3d 93       	st	X+, r19
 bd6:	91 30       	cpi	r25, 0x01	; 1
 bd8:	08 f0       	brcs	.+2      	; 0xbdc <__ftoa_engine+0x40>
 bda:	80 68       	ori	r24, 0x80	; 128
 bdc:	91 1d       	adc	r25, r1
 bde:	df 93       	push	r29
 be0:	cf 93       	push	r28
 be2:	1f 93       	push	r17
 be4:	0f 93       	push	r16
 be6:	ff 92       	push	r15
 be8:	ef 92       	push	r14
 bea:	19 2f       	mov	r17, r25
 bec:	98 7f       	andi	r25, 0xF8	; 248
 bee:	96 95       	lsr	r25
 bf0:	e9 2f       	mov	r30, r25
 bf2:	96 95       	lsr	r25
 bf4:	96 95       	lsr	r25
 bf6:	e9 0f       	add	r30, r25
 bf8:	ff 27       	eor	r31, r31
 bfa:	ee 53       	subi	r30, 0x3E	; 62
 bfc:	ff 4f       	sbci	r31, 0xFF	; 255
 bfe:	99 27       	eor	r25, r25
 c00:	33 27       	eor	r19, r19
 c02:	ee 24       	eor	r14, r14
 c04:	ff 24       	eor	r15, r15
 c06:	a7 01       	movw	r20, r14
 c08:	e7 01       	movw	r28, r14
 c0a:	05 90       	lpm	r0, Z+
 c0c:	08 94       	sec
 c0e:	07 94       	ror	r0
 c10:	28 f4       	brcc	.+10     	; 0xc1c <__ftoa_engine+0x80>
 c12:	36 0f       	add	r19, r22
 c14:	e7 1e       	adc	r14, r23
 c16:	f8 1e       	adc	r15, r24
 c18:	49 1f       	adc	r20, r25
 c1a:	51 1d       	adc	r21, r1
 c1c:	66 0f       	add	r22, r22
 c1e:	77 1f       	adc	r23, r23
 c20:	88 1f       	adc	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	06 94       	lsr	r0
 c26:	a1 f7       	brne	.-24     	; 0xc10 <__ftoa_engine+0x74>
 c28:	05 90       	lpm	r0, Z+
 c2a:	07 94       	ror	r0
 c2c:	28 f4       	brcc	.+10     	; 0xc38 <__ftoa_engine+0x9c>
 c2e:	e7 0e       	add	r14, r23
 c30:	f8 1e       	adc	r15, r24
 c32:	49 1f       	adc	r20, r25
 c34:	56 1f       	adc	r21, r22
 c36:	c1 1d       	adc	r28, r1
 c38:	77 0f       	add	r23, r23
 c3a:	88 1f       	adc	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	66 1f       	adc	r22, r22
 c40:	06 94       	lsr	r0
 c42:	a1 f7       	brne	.-24     	; 0xc2c <__ftoa_engine+0x90>
 c44:	05 90       	lpm	r0, Z+
 c46:	07 94       	ror	r0
 c48:	28 f4       	brcc	.+10     	; 0xc54 <__ftoa_engine+0xb8>
 c4a:	f8 0e       	add	r15, r24
 c4c:	49 1f       	adc	r20, r25
 c4e:	56 1f       	adc	r21, r22
 c50:	c7 1f       	adc	r28, r23
 c52:	d1 1d       	adc	r29, r1
 c54:	88 0f       	add	r24, r24
 c56:	99 1f       	adc	r25, r25
 c58:	66 1f       	adc	r22, r22
 c5a:	77 1f       	adc	r23, r23
 c5c:	06 94       	lsr	r0
 c5e:	a1 f7       	brne	.-24     	; 0xc48 <__ftoa_engine+0xac>
 c60:	05 90       	lpm	r0, Z+
 c62:	07 94       	ror	r0
 c64:	20 f4       	brcc	.+8      	; 0xc6e <__ftoa_engine+0xd2>
 c66:	49 0f       	add	r20, r25
 c68:	56 1f       	adc	r21, r22
 c6a:	c7 1f       	adc	r28, r23
 c6c:	d8 1f       	adc	r29, r24
 c6e:	99 0f       	add	r25, r25
 c70:	66 1f       	adc	r22, r22
 c72:	77 1f       	adc	r23, r23
 c74:	88 1f       	adc	r24, r24
 c76:	06 94       	lsr	r0
 c78:	a9 f7       	brne	.-22     	; 0xc64 <__ftoa_engine+0xc8>
 c7a:	84 91       	lpm	r24, Z+
 c7c:	10 95       	com	r17
 c7e:	17 70       	andi	r17, 0x07	; 7
 c80:	41 f0       	breq	.+16     	; 0xc92 <__ftoa_engine+0xf6>
 c82:	d6 95       	lsr	r29
 c84:	c7 95       	ror	r28
 c86:	57 95       	ror	r21
 c88:	47 95       	ror	r20
 c8a:	f7 94       	ror	r15
 c8c:	e7 94       	ror	r14
 c8e:	1a 95       	dec	r17
 c90:	c1 f7       	brne	.-16     	; 0xc82 <__ftoa_engine+0xe6>
 c92:	e8 e6       	ldi	r30, 0x68	; 104
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	68 94       	set
 c98:	15 90       	lpm	r1, Z+
 c9a:	15 91       	lpm	r17, Z+
 c9c:	35 91       	lpm	r19, Z+
 c9e:	65 91       	lpm	r22, Z+
 ca0:	95 91       	lpm	r25, Z+
 ca2:	05 90       	lpm	r0, Z+
 ca4:	7f e2       	ldi	r23, 0x2F	; 47
 ca6:	73 95       	inc	r23
 ca8:	e1 18       	sub	r14, r1
 caa:	f1 0a       	sbc	r15, r17
 cac:	43 0b       	sbc	r20, r19
 cae:	56 0b       	sbc	r21, r22
 cb0:	c9 0b       	sbc	r28, r25
 cb2:	d0 09       	sbc	r29, r0
 cb4:	c0 f7       	brcc	.-16     	; 0xca6 <__ftoa_engine+0x10a>
 cb6:	e1 0c       	add	r14, r1
 cb8:	f1 1e       	adc	r15, r17
 cba:	43 1f       	adc	r20, r19
 cbc:	56 1f       	adc	r21, r22
 cbe:	c9 1f       	adc	r28, r25
 cc0:	d0 1d       	adc	r29, r0
 cc2:	7e f4       	brtc	.+30     	; 0xce2 <__ftoa_engine+0x146>
 cc4:	70 33       	cpi	r23, 0x30	; 48
 cc6:	11 f4       	brne	.+4      	; 0xccc <__ftoa_engine+0x130>
 cc8:	8a 95       	dec	r24
 cca:	e6 cf       	rjmp	.-52     	; 0xc98 <__ftoa_engine+0xfc>
 ccc:	e8 94       	clt
 cce:	01 50       	subi	r16, 0x01	; 1
 cd0:	30 f0       	brcs	.+12     	; 0xcde <__ftoa_engine+0x142>
 cd2:	08 0f       	add	r16, r24
 cd4:	0a f4       	brpl	.+2      	; 0xcd8 <__ftoa_engine+0x13c>
 cd6:	00 27       	eor	r16, r16
 cd8:	02 17       	cp	r16, r18
 cda:	08 f4       	brcc	.+2      	; 0xcde <__ftoa_engine+0x142>
 cdc:	20 2f       	mov	r18, r16
 cde:	23 95       	inc	r18
 ce0:	02 2f       	mov	r16, r18
 ce2:	7a 33       	cpi	r23, 0x3A	; 58
 ce4:	28 f0       	brcs	.+10     	; 0xcf0 <__ftoa_engine+0x154>
 ce6:	79 e3       	ldi	r23, 0x39	; 57
 ce8:	7d 93       	st	X+, r23
 cea:	2a 95       	dec	r18
 cec:	e9 f7       	brne	.-6      	; 0xce8 <__ftoa_engine+0x14c>
 cee:	10 c0       	rjmp	.+32     	; 0xd10 <__ftoa_engine+0x174>
 cf0:	7d 93       	st	X+, r23
 cf2:	2a 95       	dec	r18
 cf4:	89 f6       	brne	.-94     	; 0xc98 <__ftoa_engine+0xfc>
 cf6:	06 94       	lsr	r0
 cf8:	97 95       	ror	r25
 cfa:	67 95       	ror	r22
 cfc:	37 95       	ror	r19
 cfe:	17 95       	ror	r17
 d00:	17 94       	ror	r1
 d02:	e1 18       	sub	r14, r1
 d04:	f1 0a       	sbc	r15, r17
 d06:	43 0b       	sbc	r20, r19
 d08:	56 0b       	sbc	r21, r22
 d0a:	c9 0b       	sbc	r28, r25
 d0c:	d0 09       	sbc	r29, r0
 d0e:	98 f0       	brcs	.+38     	; 0xd36 <__ftoa_engine+0x19a>
 d10:	23 95       	inc	r18
 d12:	7e 91       	ld	r23, -X
 d14:	73 95       	inc	r23
 d16:	7a 33       	cpi	r23, 0x3A	; 58
 d18:	08 f0       	brcs	.+2      	; 0xd1c <__ftoa_engine+0x180>
 d1a:	70 e3       	ldi	r23, 0x30	; 48
 d1c:	7c 93       	st	X, r23
 d1e:	20 13       	cpse	r18, r16
 d20:	b8 f7       	brcc	.-18     	; 0xd10 <__ftoa_engine+0x174>
 d22:	7e 91       	ld	r23, -X
 d24:	70 61       	ori	r23, 0x10	; 16
 d26:	7d 93       	st	X+, r23
 d28:	30 f0       	brcs	.+12     	; 0xd36 <__ftoa_engine+0x19a>
 d2a:	83 95       	inc	r24
 d2c:	71 e3       	ldi	r23, 0x31	; 49
 d2e:	7d 93       	st	X+, r23
 d30:	70 e3       	ldi	r23, 0x30	; 48
 d32:	2a 95       	dec	r18
 d34:	e1 f7       	brne	.-8      	; 0xd2e <__ftoa_engine+0x192>
 d36:	11 24       	eor	r1, r1
 d38:	ef 90       	pop	r14
 d3a:	ff 90       	pop	r15
 d3c:	0f 91       	pop	r16
 d3e:	1f 91       	pop	r17
 d40:	cf 91       	pop	r28
 d42:	df 91       	pop	r29
 d44:	99 27       	eor	r25, r25
 d46:	87 fd       	sbrc	r24, 7
 d48:	90 95       	com	r25
 d4a:	08 95       	ret

00000d4c <__prologue_saves__>:
 d4c:	2f 92       	push	r2
 d4e:	3f 92       	push	r3
 d50:	4f 92       	push	r4
 d52:	5f 92       	push	r5
 d54:	6f 92       	push	r6
 d56:	7f 92       	push	r7
 d58:	8f 92       	push	r8
 d5a:	9f 92       	push	r9
 d5c:	af 92       	push	r10
 d5e:	bf 92       	push	r11
 d60:	cf 92       	push	r12
 d62:	df 92       	push	r13
 d64:	ef 92       	push	r14
 d66:	ff 92       	push	r15
 d68:	0f 93       	push	r16
 d6a:	1f 93       	push	r17
 d6c:	cf 93       	push	r28
 d6e:	df 93       	push	r29
 d70:	cd b7       	in	r28, 0x3d	; 61
 d72:	de b7       	in	r29, 0x3e	; 62
 d74:	ca 1b       	sub	r28, r26
 d76:	db 0b       	sbc	r29, r27
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	f8 94       	cli
 d7c:	de bf       	out	0x3e, r29	; 62
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	cd bf       	out	0x3d, r28	; 61
 d82:	09 94       	ijmp

00000d84 <__epilogue_restores__>:
 d84:	2a 88       	ldd	r2, Y+18	; 0x12
 d86:	39 88       	ldd	r3, Y+17	; 0x11
 d88:	48 88       	ldd	r4, Y+16	; 0x10
 d8a:	5f 84       	ldd	r5, Y+15	; 0x0f
 d8c:	6e 84       	ldd	r6, Y+14	; 0x0e
 d8e:	7d 84       	ldd	r7, Y+13	; 0x0d
 d90:	8c 84       	ldd	r8, Y+12	; 0x0c
 d92:	9b 84       	ldd	r9, Y+11	; 0x0b
 d94:	aa 84       	ldd	r10, Y+10	; 0x0a
 d96:	b9 84       	ldd	r11, Y+9	; 0x09
 d98:	c8 84       	ldd	r12, Y+8	; 0x08
 d9a:	df 80       	ldd	r13, Y+7	; 0x07
 d9c:	ee 80       	ldd	r14, Y+6	; 0x06
 d9e:	fd 80       	ldd	r15, Y+5	; 0x05
 da0:	0c 81       	ldd	r16, Y+4	; 0x04
 da2:	1b 81       	ldd	r17, Y+3	; 0x03
 da4:	aa 81       	ldd	r26, Y+2	; 0x02
 da6:	b9 81       	ldd	r27, Y+1	; 0x01
 da8:	ce 0f       	add	r28, r30
 daa:	d1 1d       	adc	r29, r1
 dac:	0f b6       	in	r0, 0x3f	; 63
 dae:	f8 94       	cli
 db0:	de bf       	out	0x3e, r29	; 62
 db2:	0f be       	out	0x3f, r0	; 63
 db4:	cd bf       	out	0x3d, r28	; 61
 db6:	ed 01       	movw	r28, r26
 db8:	08 95       	ret

00000dba <_exit>:
 dba:	f8 94       	cli

00000dbc <__stop_program>:
 dbc:	ff cf       	rjmp	.-2      	; 0xdbc <__stop_program>
